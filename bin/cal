#! /usr/bin/env lua

-- Copyright (C) 2018 Tomoyuki Fujimori <moyu@dromozoa.com>
--
-- This file is part of dromozoa-dotfiles.
--
-- dromozoa-dotfiles is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- dromozoa-dotfiles is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with dromozoa-dotfiles.  If not, see <http://www.gnu.org/licenses/>.

local calendar = require "dromozoa.calendar"

local floor = math.floor

local function SGR(n)
  return "\27[" .. n .. "m"
end

local sgr_today = SGR(1) .. SGR("48;5;238")
local sgr_holiday = SGR(1) .. SGR(91)
local sgr_dayoff = SGR(1) .. SGR(91)
local sgr_sunday = SGR(91)
local sgr_saturday = SGR(96)
local sgr_reset = SGR(0)

local today = os.date "*t"
local today_jdn = calendar.date_to_jdn(today.year, today.month, today.day)

local year = ...
year = tonumber(year)
if not year then
  year = today.year
end

local rows = {}
for i = 1, 24 do
  local row = {}
  for j = 1, 21 do
    row[j] = false
  end
  rows[i] = row
end

local min_jdn = calendar.date_to_jdn(year,  1,  1)
local max_jdn = calendar.date_to_jdn(year, 12, 31)
local first_wday
for jdn = min_jdn, max_jdn do
  local year, month, day, wday = calendar.jdn_to_date(jdn)
  local holiday = calendar.is_holiday(year, month, day)
  if day == 1 then
    first_wday = wday
  end

  local sgr = ""
  if jdn == today_jdn then
    sgr = sgr_today
  end
  if holiday then
    if holiday.kind == "祝日" then
      sgr = sgr .. sgr_holiday
    else
      sgr = sgr .. sgr_dayoff
    end
  else
    if wday == 0 then
      sgr = sgr .. sgr_sunday
    elseif wday == 6 then
      sgr = sgr .. sgr_saturday
    end
  end

  local m = month - 1
  local d = day + first_wday - 1
  local i = floor(m / 3) * 6 + floor(d / 7) + 1
  local j = m % 3 * 7 + d % 7 + 1
  rows[i][j] = {
    year = year;
    month = month;
    day = day;
    wday = wday;
    sgr = sgr;
  }
end

for i = 1, #rows do
  local row = rows[i]
  for j = #row, 1, -1 do
    if row[j] then
      break
    else
      row[j] = nil
    end
  end
end

io.write((" "):rep(29), year, "\n\n")
for i = 1, #rows do
  if i % 6 == 1 then
    local month = floor(i / 6) * 3 + 1
    if month < 10 then
      io.write(
        ("        %d月           "):format(month),
        ("        %d月           "):format(month + 1),
        ("        %d月\n"):format(month + 2))
    else
      io.write(
        ("        %d月          "):format(month),
        ("        %d月          "):format(month + 1),
        ("        %d月\n"):format(month + 2))
    end
    local sunday = sgr_sunday .. "日" .. sgr_reset
    local saturday = sgr_saturday .. "土" .. sgr_reset
    io.write(
        sunday, " 月 火 水 木 金 ", saturday, "  ",
        sunday, " 月 火 水 木 金 ", saturday, "  ",
        sunday, " 月 火 水 木 金 ", saturday, "\n")
  end
  local row = rows[i]
  for j = 1, #row do
    local item = row[j]
    if j > 1 then
      if j % 7 == 1 then
        io.write "  "
      else
        io.write " "
      end
    end
    if item then
      local sgr = item.sgr
      if sgr ~= "" then
        io.write(sgr, ("%2d"):format(item.day), sgr_reset)
      else
        io.write(("%2d"):format(item.day))
      end
    else
      io.write "  "
    end
  end
  io.write "\n"
end
