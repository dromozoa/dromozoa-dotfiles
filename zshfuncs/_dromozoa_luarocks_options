#autoload
_dromozoa_luarocks_options() {
  options=(
    $options
    '--dev[Enable the sub-repositories in rocks servers for rockspecs of in-development versions]'
    '--global[Use the system tree when `local_by_default` is `true`.]'
    '--local[Use the tree in the user'\''s home directory. To enable it, see '\''luarocks help path'\''.]'
    '--lua-dir=[Which Lua installation to use.]:path:_files'
    '--lua-version=[Which Lua version to use.]:vers'
    '--only-server=[Fetch rocks/rockspecs from this server only (overrides any entries in the config file)]:server:_hosts'
    '--only-sources=[Restrict downloads to paths matching the given URL.]:url:_urls'
    '--server=[Fetch rocks/rockspecs from this server (takes priority over config file)]:server:_hosts'
    '--timeout=[Timeout on network operations, in seconds. 0 means no timeout (wait forever). Default is 30.]:seconds'
    '--tree=[Which tree to operate on.]:path:_files'
    '--verbose[Display verbose output of commands executed.]'
  )

  case X$1 in
    Xbuild)
      options=(
        $options
        '--branch=[Override the `source.branch` field in the loaded rockspec. Allows to specify a different branch to  fetch. Particularly for "dev" rocks.]:branch-name'
        '--deps-mode=[How to handle dependencies.]:mode:((all\:"use all trees from the rocks_trees list for finding dependencies" one\:"use only the current tree (possibly set with --tree)" order\:"use trees based on order (use the current tree and all trees below it on the rocks_trees list)" none\:"ignore dependencies altogether."))'
        '--keep[Do not remove previously installed versions of the rock after building a new one. This behavior can be made permanent by setting keep_other_versions=true in the configuration file.]'
        '--only-deps[Installs only the dependencies of the rock.]'
        '--pack-binary-rock[Do not install rock. Instead, produce a .rock file with the contents of compilation in the current directory.]'
        '--sign[To be used with --pack-binary-rock. Also produce a signature file for the generated .rock file.]'
        '--verify[Verify signature of the rockspec or src.rock being built. If the rockspec or src.rock is being downloaded, LuaRocks will attempt to download the signature as well. Otherwise, the signature file should be already available locally in the same directory. You need the signer’s public key in your local keyring for this option to work properly.]'
      )
      ;;
    Xconfig)
      options=(
        $options
        '--json[Output as JSON]'
        '--scope=[The scope indicates which config file should be rewritten. Accepted values are "system", "user" or "project". * Using a wrapper created with `luarocks init`, the default is "project". * Using --local (or when `local_by_default` is `true`), the default is "user". * Otherwise, the default is "system".]:system|user|project'
        '--unset'
      )
      ;;
    Xdoc)
      options=(
        $options
        '--home[Open the home page of project.]'
        '--list[List documentation files only.]'
      )
      ;;
    Xdownload)
      options=(
        $options
        '--all[Download all files if there are multiple matches.]'
        '--arch=[Download rock for a specific architecture.]:arch'
        '--rockspec[Download .rockspec if available.]'
        '--source[Download .src.rock if available.]'
      )
      ;;
    Xinit)
      options=(
        $options
        '--detailed=[A longer description string.]:text'
        '--homepage=[Project homepage.]:url:_urls'
        '--lib=[A comma-separated list of libraries that C files need to link to.]:library'
        '--license=[A license string, such as "MIT/X11" or "GNU GPL v3".]:text'
        '--lua-versions=[Supported Lua versions. Accepted values are "5.1", "5.2", "5.3", "5.1,5.2", "5.2,5.3", or "5.1,5.2,5.3".]:versions'
        '--reset[Delete .luarocks/config-5.x.lua and ./lua and generate new ones.]'
        '--rockspec-format=[Rockspec format version, such as "1.0" or "1.1".]:ver'
        '--summary=[A short one-line description summary.]:text'
      )
      ;;
    Xinstall)
      options=(
        $options
        '--deps-mode=[How to handle dependencies.]:mode:((all\:"use all trees from the rocks_trees list for finding dependencies" one\:"use only the current tree (possibly set with --tree)" order\:"use trees based on order (use the current tree and all trees below it on the rocks_trees list)" none\:"ignore dependencies altogether."))'
        '--keep[Do not remove previously installed versions of the rock after installing a new one. This behavior can be made permanent by setting keep_other_versions=true in the configuration file.]'
        '--no-doc[Installs the rock without its documentation.]'
        '--only-deps[Installs only the dependencies of the rock.]'
        '--verify[Verify signature of the rock being installed. If rock is being downloaded, LuaRocks will attempt to download the signature as well. If the rock is local, the signature file should be in the same directory. You need the signer’s public key in your local keyring for this option to work properly.]'
      )
      ;;
    Xlist)
      options=(
        $options
        '--outdated[List only rocks for which there is a higher version available in the rocks server.]'
        '--porcelain[Produce machine-friendly output.]'
      )
      ;;
    Xmake)
      options=(
        $options
        '--branch=[Override the `source.branch` field in the loaded rockspec. Allows to specify a different branch to  fetch. Particularly for "dev" rocks.]:branch-name'
        '--keep[Do not remove previously installed versions of the rock after installing a new one. This behavior can be made permanent by setting keep_other_versions=true in the configuration file.]'
        '--pack-binary-rock[Do not install rock. Instead, produce a .rock file with the contents of compilation in the current directory.]'
        '--sign[To be used with --pack-binary-rock. Also produce a signature file for the generated .rock file.]'
        '--verify[Verify signature of the rockspec or src.rock being built. If the rockspec or src.rock is being downloaded, LuaRocks will attempt to download the signature as well. Otherwise, the signature file should be already available locally in the same directory. You need the signer’s public key in your local keyring for this option to work properly.]'
      )
      ;;
    Xnew_version)
      options=(
        $options
        '--tag=:tag'
      )
      ;;
    Xpack)
      options=(
        $options
        '--sign[Produce a signature file as well.]'
      )
      ;;
    Xpath)
      options=(
        $options
        '--append[Appends the paths to the existing paths. Default is to prefix the LR paths to the existing paths.]'
        '--lr-bin[Exports the system path (not formatted as shell command)]'
        '--lr-cpath[Exports the Lua cpath (not formatted as shell command)]'
        '--lr-path[Exports the Lua path (not formatted as shell command)]'
        '--no-bin[Do not export the PATH variable]'
      )
      ;;
    Xpurge)
      options=(
        $options
        '--old-versions[Keep the highest-numbered version of each rock and remove the other ones. By default it only removes old versions if they are not needed as dependencies. This can be overridden with the flag --force.]'
        '--tree=:path:_files'
      )
      ;;
    Xremove)
      options=(
        $options
        '--deps-mode=[How to handle dependencies.]:mode:((all\:"use all trees from the rocks_trees list for finding dependencies" one\:"use only the current tree (possibly set with --tree)" order\:"use trees based on order (use the current tree and all trees below it on the rocks_trees list)" none\:"ignore dependencies altogether."))'
        '--force'
        '--force-fast'
      )
      ;;
    Xsearch)
      options=(
        $options
        '--all[List all contents of the server that are suitable to this platform, do not filter by name.]'
        '--binary[Return only pure Lua and binary rocks (rocks that can be used with the "install" command without requiring a C toolchain).]'
        '--porcelain[Return a machine readable format.]'
        '--source[Return only rockspecs and source rocks, to be used with the "build" command.]'
      )
      ;;
    Xshow)
      options=(
        $options
        '--build-deps[build-only dependencies for this package]'
        '--deps[packages this package depends on]'
        '--home[home page of project]'
        '--modules[all modules provided by this package as used by require()]'
        '--mversion[the package version]'
        '--rock-dir[data directory of the installed rock]'
        '--rock-tree[local tree where rock is installed]'
        '--rockspec[the full path of the rockspec file]'
        '--test-deps[dependencies for testing this package]'
      )
      ;;
    Xtest)
      options=(
        $options
        '--deps-mode=[How to handle dependencies.]:mode:((all\:"use all trees from the rocks_trees list for finding dependencies" one\:"use only the current tree (possibly set with --tree)" order\:"use trees based on order (use the current tree and all trees below it on the rocks_trees list)" none\:"ignore dependencies altogether."))'
        '--test-type=[Specify the test suite type manually if it was not specified in the rockspec and it could not be auto-detected.]:type'
      )
      ;;
    Xunpack)
      options=(
        $options
        '--force[Unpack files even if the output directory already exists.]'
      )
      ;;
    Xupload)
      options=(
        $options
        '--api-key=[Give it an API key. It will be stored for subsequent uses.]:key'
        '--force[Replace existing rockspec if the same revision of a module already exists. This should be used only  in case of upload mistakes: when updating a rockspec, increment the revision number instead.]'
        '--sign[Upload a signature file alongside each file as well.]'
        '--skip-pack[Do not pack and send source rock.]'
        '--temp-key=[Use the given a temporary API key in this invocation only. It will not be stored.]:key'
      )
      ;;
    Xwrite_rockspec)
      options=(
        $options
        '--detailed=[A longer description string.]:text'
        '--homepage=[Project homepage.]:url:_urls'
        '--lib=[A comma-separated list of libraries that C files need to link to.]:library'
        '--license=[A license string, such as "MIT/X11" or "GNU GPL v3".]:text'
        '--lua-versions=[Supported Lua versions.  Accepted values are: "5.1", "5.2", "5.3", "5.4", "5.1,5.2", "5.2,5.3", "5.3,5.4", "5.1,5.2,5.3", "5.2,5.3,5.4", or "5.1,5.2,5.3,5.4"]:versions'
        '--output=[Write the rockspec with the given filename. If not given, a file is written in the current directory with a filename based on given name and version.]:file:_files'
        '--rockspec-format=[Rockspec format version, such as "1.0" or "1.1".]:ver'
        '--summary=[A short one-line description summary.]:text'
        '--tag=[Tag to use. Will attempt to extract version number from it.]:tag'
      )
      ;;
  esac
}
